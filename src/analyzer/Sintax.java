
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzer;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Sintax() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Sintax(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\034\000\002\002\004\000\002\107\011\000\002\066" +
                            "\003\000\002\066\004\000\002\070\003\000\002\070\003" +
                            "\000\002\070\003\000\002\070\003\000\002\037\003\000" +
                            "\002\037\003\000\002\037\003\000\002\034\005\000\002" +
                            "\035\007\000\002\036\006\000\002\027\003\000\002\027" +
                            "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
                            "\000\002\112\003\000\002\112\003\000\002\112\003\000" +
                            "\002\112\003\000\002\112\003\000\002\112\003\000\002" +
                            "\112\003\000\002\020\003\000\002\020\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\053\000\004\004\005\001\002\000\004\002\055\001" +
                            "\002\000\004\026\006\001\002\000\004\037\007\001\002" +
                            "\000\004\040\010\001\002\000\004\041\011\001\002\000" +
                            "\016\004\020\005\012\006\022\007\015\011\030\054\024" +
                            "\001\002\000\004\054\ufff1\001\002\000\020\004\ufffb\005" +
                            "\ufffb\006\ufffb\007\ufffb\011\ufffb\042\ufffb\054\ufffb\001\002" +
                            "\000\020\004\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc\042" +
                            "\ufffc\054\ufffc\001\002\000\004\054\ufff0\001\002\000\020" +
                            "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\011\ufffd\042\ufffd\054" +
                            "\ufffd\001\002\000\020\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
                            "\011\ufff9\042\ufff9\054\ufff9\001\002\000\004\054\ufff3\001" +
                            "\002\000\020\004\ufff8\005\ufff8\006\ufff8\007\ufff8\011\ufff8" +
                            "\042\ufff8\054\ufff8\001\002\000\004\054\ufff2\001\002\000" +
                            "\004\054\050\001\002\000\004\030\034\001\002\000\020" +
                            "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7\042\ufff7\054" +
                            "\ufff7\001\002\000\020\004\020\005\012\006\022\007\015" +
                            "\011\030\042\uffff\054\024\001\002\000\020\004\ufffa\005" +
                            "\ufffa\006\ufffa\007\ufffa\011\ufffa\042\ufffa\054\ufffa\001\002" +
                            "\000\004\054\uffef\001\002\000\004\042\032\001\002\000" +
                            "\004\002\000\001\002\000\004\042\ufffe\001\002\000\020" +
                            "\005\036\010\046\012\037\054\041\055\045\064\043\065" +
                            "\042\001\002\000\004\027\uffe8\001\002\000\004\027\uffed" +
                            "\001\002\000\004\027\uffec\001\002\000\004\027\uffe9\001" +
                            "\002\000\004\027\uffea\001\002\000\004\027\uffe6\001\002" +
                            "\000\004\027\uffe7\001\002\000\004\027\047\001\002\000" +
                            "\004\027\uffee\001\002\000\004\027\uffeb\001\002\000\020" +
                            "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\042\ufff4\054" +
                            "\ufff4\001\002\000\006\027\051\030\052\001\002\000\020" +
                            "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\011\ufff6\042\ufff6\054" +
                            "\ufff6\001\002\000\020\005\036\010\046\012\037\054\041" +
                            "\055\045\064\043\065\042\001\002\000\004\027\054\001" +
                            "\002\000\020\004\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5" +
                            "\042\ufff5\054\ufff5\001\002\000\004\002\001\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\053\000\004\107\003\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\026\027\022\034\016\035\020\036\024\037" +
                            "\015\066\030\067\013\070\025\072\012\105\026\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\026\027\022" +
                            "\034\016\035\020\036\024\037\015\066\032\067\013\070" +
                            "\025\072\012\105\026\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\010\020\037\100\034\112\043\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
                            "\020\037\100\034\112\052\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Sintax$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Sintax$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }


    private Symbol s;

    public void syntax_error(Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }


    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Sintax$actions {
        private final Sintax parser;

        /**
         * Constructor
         */
        CUP$Sintax$actions(Sintax parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
                int CUP$Sintax$act_num,
                java_cup.runtime.lr_parser CUP$Sintax$parser,
                java.util.Stack CUP$Sintax$stack,
                int CUP$Sintax$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Sintax$result;

            /* select the action based on the action number */
            switch (CUP$Sintax$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= INICIO EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).right;
                    Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)).value;
                    RESULT = start_val;
                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Sintax$parser.done_parsing();
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // INICIO ::= Int Main Parentesis_apertura Parentesis_cierre Llave_apertura BLOQUE Llave_cierre
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO", 69, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // BLOQUE ::= EXPR
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE", 52, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // BLOQUE ::= EXPR BLOQUE
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE", 52, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // EXPR ::= VARIABLE
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR", 54, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // EXPR ::= OPERACION
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR", 54, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // EXPR ::= ESTRUCTURA
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR", 54, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // EXPR ::= FUNCS
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR", 54, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // VARIABLE ::= CREACION
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE", 29, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // VARIABLE ::= CREAASIG
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE", 29, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // VARIABLE ::= ASIGNAR
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE", 29, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // CREACION ::= TIPO Identificador Numeral
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREACION", 26, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // CREAASIG ::= TIPO Identificador Igual TIPOASIG Numeral
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAASIG", 27, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // ASIGNAR ::= Identificador Igual TIPOASIG Numeral
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAR", 28, ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // TIPO ::= Int
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO", 21, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // TIPO ::= Bool
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO", 21, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // TIPO ::= Float
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO", 21, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // TIPO ::= Char
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO", 21, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // TIPO ::= String
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO", 21, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // TIPOASIG ::= Numero
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG", 72, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // TIPOASIG ::= Float
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG", 72, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // TIPOASIG ::= String_literal
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG", 72, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // TIPOASIG ::= Char_literal
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG", 72, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // TIPOASIG ::= Identificador
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG", 72, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // TIPOASIG ::= BOOL
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG", 72, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // TIPOASIG ::= OP
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG", 72, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // BOOL ::= True
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL", 14, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // BOOL ::= False
                {
                    Object RESULT = null;

                    CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL", 14, ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()), RESULT);
                }
                return CUP$Sintax$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Sintax$act_num + "found in internal parse table");

            }
        } /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$Sintax$do_action(
                int CUP$Sintax$act_num,
                java_cup.runtime.lr_parser CUP$Sintax$parser,
                java.util.Stack CUP$Sintax$stack,
                int CUP$Sintax$top)
                throws java.lang.Exception {
            return CUP$Sintax$do_action_part00000000(
                    CUP$Sintax$act_num,
                    CUP$Sintax$parser,
                    CUP$Sintax$stack,
                    CUP$Sintax$top);
        }
    }

}
