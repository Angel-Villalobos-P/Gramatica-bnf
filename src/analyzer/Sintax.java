
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzer;

import java_cup.runtime.Symbol;
import analyzer.Generador.PilaSemantica;
import analyzer.Generador.Generador;
import analyzer.MainFrm;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\105\003\000\002\105" +
    "\004\000\002\106\011\000\002\106\010\000\002\065\003" +
    "\000\002\065\004\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\033\005\000\002\033\005" +
    "\000\002\033\003\000\002\034\007\000\002\034\003\000" +
    "\002\035\006\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\110" +
    "\003\000\002\110\003\000\002\110\003\000\002\110\003" +
    "\000\002\110\003\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\003\000\002" +
    "\020\003\000\002\020\003\000\002\120\003\000\002\120" +
    "\003\000\002\115\006\000\002\116\010\000\002\117\011" +
    "\000\002\024\003\000\002\024\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\005\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\042" +
    "\005\000\002\046\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\050\003\000\002\050\003\000\002\052" +
    "\004\000\002\052\004\000\002\053\004\000\002\053\004" +
    "\000\002\057\005\000\002\063\005\000\002\063\004\000" +
    "\002\064\003\000\002\064\003\000\002\040\005\000\002" +
    "\040\005\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\072\011\000\002\072\011\000\002\072\012" +
    "\000\002\072\015\000\002\072\015\000\002\072\016\000" +
    "\002\073\011\000\002\076\003\000\002\076\004\000\002" +
    "\074\011\000\002\075\006\000\002\075\007\000\002\075" +
    "\010\000\002\075\005\000\002\075\006\000\002\075\007" +
    "\000\002\112\003\000\002\112\003\000\002\112\003\000" +
    "\002\104\003\000\002\104\004\000\002\101\006\000\002" +
    "\103\011\000\002\103\012\000\002\103\013\000\002\103" +
    "\012\000\002\027\003\000\002\027\005\000\002\030\005" +
    "\000\002\114\005\000\002\114\006\000\002\113\005\000" +
    "\002\111\003\000\002\111\003\000\002\111\003\000\002" +
    "\111\003\000\002\111\003\000\002\107\005\000\002\107" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\004\006\001\002\000\016\002\000\004" +
    "\043\005\157\006\070\007\054\011\062\001\002\000\004" +
    "\002\300\001\002\000\004\026\007\001\002\000\004\037" +
    "\010\001\002\000\004\040\011\001\002\000\004\041\012" +
    "\001\002\000\052\003\050\004\043\005\045\006\070\007" +
    "\054\011\062\015\023\017\042\020\052\022\055\025\037" +
    "\037\016\042\014\047\034\050\040\052\024\054\065\055" +
    "\074\064\015\065\053\001\002\000\004\052\276\001\002" +
    "\000\016\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\011" +
    "\ufffd\001\002\000\102\003\uffdb\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\011\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\025\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\054\uffdb\055\uffdb\062\uffdb" +
    "\064\uffdb\065\uffdb\001\002\000\024\005\105\037\016\047" +
    "\034\050\040\052\024\054\221\055\074\064\015\065\053" +
    "\001\002\000\060\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\011\ufff1\015\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\025\ufff1\037\ufff1\042\ufff1\047\ufff1\050\ufff1\052" +
    "\ufff1\054\ufff1\055\ufff1\062\ufff1\064\ufff1\065\ufff1\001\002" +
    "\000\102\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\011" +
    "\uffce\015\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\025\uffce\027\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\042\uffce\047\uffce\050\uffce" +
    "\051\uffce\052\uffce\054\uffce\055\uffce\062\uffce\064\uffce\065" +
    "\uffce\001\002\000\076\003\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\011\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\025\ufff8\031\103\032\101\033\076\034\104" +
    "\035\100\036\102\037\ufff8\042\ufff8\047\ufff8\050\ufff8\051" +
    "\137\052\ufff8\054\ufff8\055\ufff8\062\ufff8\064\ufff8\065\ufff8" +
    "\001\002\000\004\054\262\001\002\000\004\037\240\001" +
    "\002\000\010\054\237\064\015\065\053\001\002\000\060" +
    "\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc\015" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\025\ufffc" +
    "\037\ufffc\042\ufffc\047\ufffc\050\ufffc\052\ufffc\054\ufffc\055" +
    "\ufffc\062\ufffc\064\ufffc\065\ufffc\001\002\000\060\003\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\015\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\025\ufff9\037\ufff9" +
    "\042\ufff9\047\ufff9\050\ufff9\052\ufff9\054\ufff9\055\ufff9\062" +
    "\ufff9\064\ufff9\065\ufff9\001\002\000\024\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\047\233\050\234\051" +
    "\232\001\002\000\102\003\uffbf\004\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\011\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\025\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\042\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf\055\uffbf\062\uffbf" +
    "\064\uffbf\065\uffbf\001\002\000\060\003\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\011\ufff7\015\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\025\ufff7\037\ufff7\042\ufff7\047" +
    "\ufff7\050\ufff7\052\ufff7\054\ufff7\055\ufff7\062\ufff7\064\ufff7" +
    "\065\ufff7\001\002\000\102\003\uffc0\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\011\uffc0\015\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\025\uffc0\027\uffc0\031\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\042\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\052\uffc0\054\uffc0\055\uffc0\062" +
    "\uffc0\064\uffc0\065\uffc0\001\002\000\060\003\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\011\ufff4\015\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\025\ufff4\037\ufff4\042\ufff4" +
    "\047\ufff4\050\ufff4\052\ufff4\054\ufff4\055\ufff4\062\ufff4\064" +
    "\ufff4\065\ufff4\001\002\000\010\005\105\054\110\055\074" +
    "\001\002\000\102\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\011\uffb6\015\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\025\uffb6\027\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\042\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\054\uffb6\055\uffb6\062\uffb6\064" +
    "\uffb6\065\uffb6\001\002\000\102\003\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\011\uffd2\015\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\023\uffd2\025\uffd2\027\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\042" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\054\uffd2\055\uffd2" +
    "\062\uffd2\064\uffd2\065\uffd2\001\002\000\032\005\121\010" +
    "\130\012\125\037\016\047\034\050\040\052\024\053\122" +
    "\054\123\055\117\064\015\065\053\001\002\000\010\005" +
    "\105\054\110\055\074\001\002\000\102\003\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\011\uffcd\015\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\025\uffcd\027\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\042\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\054\uffcd" +
    "\055\uffcd\062\uffcd\064\uffcd\065\uffcd\001\002\000\004\037" +
    "\217\001\002\000\004\054\uffea\001\002\000\060\003\uffb3" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3\015\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\025\uffb3\037\uffb3" +
    "\042\uffb3\047\uffb3\050\uffb3\052\uffb3\054\uffb3\055\uffb3\062" +
    "\uffb3\064\uffb3\065\uffb3\001\002\000\026\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\054\uffe8\001\002\000\060\003\uffd8\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\011\uffd8\015\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\025\uffd8\037\uffd8\042\uffd8\047\uffd8" +
    "\050\uffd8\052\uffd8\054\uffd8\055\uffd8\062\uffd8\064\uffd8\065" +
    "\uffd8\001\002\000\060\003\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\011\ufff6\015\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\025\ufff6\037\ufff6\042\ufff6\047\ufff6\050\ufff6" +
    "\052\ufff6\054\ufff6\055\ufff6\062\ufff6\064\ufff6\065\ufff6\001" +
    "\002\000\060\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\011\uffec\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\025\uffec\037\uffec\042\uffec\047\uffec\050\uffec\052\uffec" +
    "\054\uffec\055\uffec\062\uffec\064\uffec\065\uffec\001\002\000" +
    "\102\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1" +
    "\015\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\025" +
    "\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\042\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\054\uffd1\055\uffd1\062\uffd1\064\uffd1\065\uffd1" +
    "\001\002\000\004\037\165\001\002\000\102\003\uffda\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\011\uffda\015\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\025\uffda\027\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\042\uffda\047\uffda\050\uffda\051\uffda\052\uffda\054" +
    "\uffda\055\uffda\062\uffda\064\uffda\065\uffda\001\002\000\004" +
    "\054\uffe7\001\002\000\004\037\162\001\002\000\060\003" +
    "\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\011\uffb1\015\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\025\uffb1\037" +
    "\uffb1\042\uffb1\047\uffb1\050\uffb1\052\uffb1\054\uffb1\055\uffb1" +
    "\062\uffb1\064\uffb1\065\uffb1\001\002\000\102\003\uffcf\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\015\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\025\uffcf\027\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\042\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\054" +
    "\uffcf\055\uffcf\062\uffcf\064\uffcf\065\uffcf\001\002\000\060" +
    "\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\015" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\025\ufff3" +
    "\037\ufff3\042\ufff3\047\ufff3\050\ufff3\052\ufff3\054\ufff3\055" +
    "\ufff3\062\ufff3\064\ufff3\065\ufff3\001\002\000\060\003\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\015\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\025\ufffa\037\ufffa" +
    "\042\ufffa\047\ufffa\050\ufffa\052\ufffa\054\ufffa\055\ufffa\062" +
    "\ufffa\064\ufffa\065\ufffa\001\002\000\004\054\uffe6\001\002" +
    "\000\060\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\011" +
    "\uffb2\015\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\025\uffb2\037\uffb2\042\uffb2\047\uffb2\050\uffb2\052\uffb2\054" +
    "\uffb2\055\uffb2\062\uffb2\064\uffb2\065\uffb2\001\002\000\060" +
    "\003\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\015" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\025\ufff2" +
    "\037\ufff2\042\ufff2\047\ufff2\050\ufff2\052\ufff2\054\ufff2\055" +
    "\ufff2\062\ufff2\064\ufff2\065\ufff2\001\002\000\034\030\115" +
    "\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\113\043\114\047\uffc9\050\uffc9\051\uffc9\052\uffb7\001\002" +
    "\000\060\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\011" +
    "\uffee\015\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\025\uffee\037\uffee\042\uffee\047\uffee\050\uffee\052\uffee\054" +
    "\uffee\055\uffee\062\uffee\064\uffee\065\uffee\001\002\000\052" +
    "\003\050\004\043\005\045\006\070\007\054\011\062\015" +
    "\023\017\042\020\052\022\055\025\037\037\016\042\111" +
    "\047\034\050\040\052\024\054\065\055\074\064\015\065" +
    "\053\001\002\000\004\054\uffe9\001\002\000\102\003\uffcc" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\015\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\025\uffcc\027\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\042\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\054\uffcc\055\uffcc\062\uffcc\064\uffcc\065\uffcc\001\002\000" +
    "\060\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9" +
    "\015\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\025" +
    "\uffd9\037\uffd9\042\uffd9\047\uffd9\050\uffd9\052\uffd9\054\uffd9" +
    "\055\uffd9\062\uffd9\064\uffd9\065\uffd9\001\002\000\060\003" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5\015\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\025\ufff5\037" +
    "\ufff5\042\ufff5\047\ufff5\050\ufff5\052\ufff5\054\ufff5\055\ufff5" +
    "\062\ufff5\064\ufff5\065\ufff5\001\002\000\104\003\uffc8\004" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8\015\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\025\uffc8\027\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\042\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\054" +
    "\uffc8\055\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\001\002" +
    "\000\016\031\103\032\101\033\076\034\104\035\100\036" +
    "\102\001\002\000\010\005\uffc4\054\uffc4\055\uffc4\001\002" +
    "\000\010\005\105\054\110\055\074\001\002\000\010\005" +
    "\uffc2\054\uffc2\055\uffc2\001\002\000\010\005\uffc5\054\uffc5" +
    "\055\uffc5\001\002\000\010\005\uffc1\054\uffc1\055\uffc1\001" +
    "\002\000\010\005\uffc6\054\uffc6\055\uffc6\001\002\000\010" +
    "\005\uffc3\054\uffc3\055\uffc3\001\002\000\104\003\uffc7\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\015\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7\027\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\042\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\054" +
    "\uffc7\055\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\001\002" +
    "\000\102\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\011" +
    "\uffca\015\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\025\uffca\027\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\042\uffca\047\uffca\050\uffca" +
    "\051\uffca\052\uffca\054\uffca\055\uffca\062\uffca\064\uffca\065" +
    "\uffca\001\002\000\102\003\uffcb\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\011\uffcb\015\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\025\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\054\uffcb\055\uffcb\062\uffcb" +
    "\064\uffcb\065\uffcb\001\002\000\104\003\uffc9\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\011\uffc9\015\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\025\uffc9\027\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\042\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\054\uffc9\055" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\001\002\000\016" +
    "\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\011\ufffe\001" +
    "\002\000\060\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\011\ufffb\015\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\025\ufffb\037\ufffb\042\ufffb\047\ufffb\050\ufffb\052\ufffb" +
    "\054\ufffb\055\ufffb\062\ufffb\064\ufffb\065\ufffb\001\002\000" +
    "\006\040\152\061\150\001\002\000\006\054\134\055\133" +
    "\001\002\000\032\005\121\010\130\012\125\037\016\047" +
    "\034\050\040\052\024\053\122\054\123\055\117\064\015" +
    "\065\053\001\002\000\024\027\uffdd\031\103\032\101\033" +
    "\076\034\104\035\100\036\102\040\uffdd\051\137\001\002" +
    "\000\030\027\uffe5\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\040\uffe5\047\uffc8\050\uffc8\051\uffc8\001\002" +
    "\000\006\027\uffdc\040\uffdc\001\002\000\030\027\uffe4\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffe4" +
    "\047\uffc7\050\uffc7\051\uffc7\001\002\000\006\027\uffe0\040" +
    "\uffe0\001\002\000\036\027\uffe1\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\113\040\uffe1\043\132\047" +
    "\uffc9\050\uffc9\051\uffc9\052\uffb7\001\002\000\004\027\131" +
    "\001\002\000\006\027\uffe3\040\uffe3\001\002\000\010\027" +
    "\uffde\040\uffde\052\uffb6\001\002\000\006\027\uffdf\040\uffdf" +
    "\001\002\000\006\027\uffe2\040\uffe2\001\002\000\060\003" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\015\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb\037" +
    "\uffeb\042\uffeb\047\uffeb\050\uffeb\052\uffeb\054\uffeb\055\uffeb" +
    "\062\uffeb\064\uffeb\065\uffeb\001\002\000\006\054\134\055" +
    "\133\001\002\000\004\044\uffd3\001\002\000\004\044\uffd4" +
    "\001\002\000\004\044\136\001\002\000\006\027\uffd7\040" +
    "\uffd7\001\002\000\010\005\105\054\110\055\074\001\002" +
    "\000\010\005\105\054\110\055\074\001\002\000\102\003" +
    "\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5\015\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\025\uffb5\027" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\042\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\054\uffb5\055\uffb5\062\uffb5\064\uffb5\065\uffb5\001\002" +
    "\000\102\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\011" +
    "\uffb4\015\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\025\uffb4\027\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\042\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\054\uffb4\055\uffb4\062\uffb4\064\uffb4\065" +
    "\uffb4\001\002\000\004\044\144\001\002\000\004\030\145" +
    "\001\002\000\032\005\121\010\130\012\125\037\016\047" +
    "\034\050\040\052\024\053\122\054\123\055\117\064\015" +
    "\065\053\001\002\000\004\027\147\001\002\000\060\003" +
    "\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\015\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\025\uffd5\037" +
    "\uffd5\042\uffd5\047\uffd5\050\uffd5\052\uffd5\054\uffd5\055\uffd5" +
    "\062\uffd5\064\uffd5\065\uffd5\001\002\000\014\004\043\005" +
    "\157\006\070\007\054\011\062\001\002\000\006\040\uff96" +
    "\061\uff96\001\002\000\064\003\uff93\004\uff93\005\uff93\006" +
    "\uff93\007\uff93\011\uff93\015\uff93\017\uff93\020\uff93\021\uff93" +
    "\022\uff93\023\uff93\025\uff93\027\uff93\037\uff93\040\uff93\042" +
    "\uff93\047\uff93\050\uff93\052\uff93\054\uff93\055\uff93\062\uff93" +
    "\064\uff93\065\uff93\001\002\000\006\040\155\061\154\001" +
    "\002\000\004\061\150\001\002\000\064\003\uff92\004\uff92" +
    "\005\uff92\006\uff92\007\uff92\011\uff92\015\uff92\017\uff92\020" +
    "\uff92\021\uff92\022\uff92\023\uff92\025\uff92\027\uff92\037\uff92" +
    "\040\uff92\042\uff92\047\uff92\050\uff92\052\uff92\054\uff92\055" +
    "\uff92\062\uff92\064\uff92\065\uff92\001\002\000\006\040\uff95" +
    "\061\uff95\001\002\000\004\054\uffe8\001\002\000\004\054" +
    "\161\001\002\000\006\040\uff94\061\uff94\001\002\000\032" +
    "\005\121\010\130\012\125\037\016\047\034\050\040\052" +
    "\024\053\122\054\123\055\117\064\015\065\053\001\002" +
    "\000\004\040\164\001\002\000\060\003\uff9b\004\uff9b\005" +
    "\uff9b\006\uff9b\007\uff9b\011\uff9b\015\uff9b\017\uff9b\020\uff9b" +
    "\021\uff9b\022\uff9b\023\uff9b\025\uff9b\037\uff9b\042\uff9b\047" +
    "\uff9b\050\uff9b\052\uff9b\054\uff9b\055\uff9b\062\uff9b\064\uff9b" +
    "\065\uff9b\001\002\000\010\005\105\054\110\055\074\001" +
    "\002\000\004\040\167\001\002\000\004\041\170\001\002" +
    "\000\006\021\171\023\172\001\002\000\014\005\105\010" +
    "\207\012\210\054\110\055\074\001\002\000\004\063\177" +
    "\001\002\000\010\021\171\023\172\042\175\001\002\000" +
    "\010\021\uffa9\023\uffa9\042\uffa9\001\002\000\060\003\uffa7" +
    "\004\uffa7\005\uffa7\006\uffa7\007\uffa7\011\uffa7\015\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\025\uffa7\037\uffa7" +
    "\042\uffa7\047\uffa7\050\uffa7\052\uffa7\054\uffa7\055\uffa7\062" +
    "\uffa7\064\uffa7\065\uffa7\001\002\000\010\021\uffa8\023\uffa8" +
    "\042\uffa8\001\002\000\052\003\050\004\043\005\045\006" +
    "\070\007\054\011\062\015\023\017\042\020\052\022\055" +
    "\025\037\037\016\047\034\050\040\052\024\054\065\055" +
    "\074\062\200\064\015\065\053\001\002\000\004\027\204" +
    "\001\002\000\060\003\050\004\043\005\045\006\070\007" +
    "\054\011\062\015\023\017\042\020\052\021\uffa3\022\055" +
    "\023\uffa3\025\037\037\016\042\uffa3\047\034\050\040\052" +
    "\024\054\065\055\074\062\202\064\015\065\053\001\002" +
    "\000\004\027\203\001\002\000\010\021\uffa1\023\uffa1\042" +
    "\uffa1\001\002\000\010\021\uffa2\023\uffa2\042\uffa2\001\002" +
    "\000\004\063\211\001\002\000\004\063\uff9e\001\002\000" +
    "\004\063\uff9f\001\002\000\004\063\uffa0\001\002\000\052" +
    "\003\050\004\043\005\045\006\070\007\054\011\062\015" +
    "\023\017\042\020\052\022\055\025\037\037\016\047\034" +
    "\050\040\052\024\054\065\055\074\062\212\064\015\065" +
    "\053\001\002\000\004\027\216\001\002\000\060\003\050" +
    "\004\043\005\045\006\070\007\054\011\062\015\023\017" +
    "\042\020\052\021\uffa6\022\055\023\uffa6\025\037\037\016" +
    "\042\uffa6\047\034\050\040\052\024\054\065\055\074\062" +
    "\214\064\015\065\053\001\002\000\004\027\215\001\002" +
    "\000\010\021\uffa4\023\uffa4\042\uffa4\001\002\000\010\021" +
    "\uffa5\023\uffa5\042\uffa5\001\002\000\024\005\105\037\016" +
    "\047\034\050\040\052\024\054\221\055\074\064\015\065" +
    "\053\001\002\000\022\031\103\032\101\033\076\034\104" +
    "\035\100\036\102\040\222\051\137\001\002\000\026\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffb7\001\002\000\004\041\223\001" +
    "\002\000\050\003\050\004\043\005\045\006\070\007\054" +
    "\011\062\015\023\017\042\020\052\022\055\025\037\037" +
    "\016\047\034\050\040\052\024\054\065\055\074\064\015" +
    "\065\053\001\002\000\052\003\050\004\043\005\045\006" +
    "\070\007\054\011\062\015\023\017\042\020\052\022\055" +
    "\025\037\037\016\042\225\047\034\050\040\052\024\054" +
    "\065\055\074\064\015\065\053\001\002\000\060\003\uffaa" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\011\uffaa\015\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\025\uffaa\037\uffaa" +
    "\042\uffaa\047\uffaa\050\uffaa\052\uffaa\054\uffaa\055\uffaa\062" +
    "\uffaa\064\uffaa\065\uffaa\001\002\000\102\003\uffbb\004\uffbb" +
    "\005\uffbb\006\uffbb\007\uffbb\011\uffbb\015\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\025\uffbb\027\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\042\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb" +
    "\055\uffbb\062\uffbb\064\uffbb\065\uffbb\001\002\000\004\027" +
    "\230\001\002\000\060\003\uff91\004\uff91\005\uff91\006\uff91" +
    "\007\uff91\011\uff91\015\uff91\017\uff91\020\uff91\021\uff91\022" +
    "\uff91\023\uff91\025\uff91\037\uff91\042\uff91\047\uff91\050\uff91" +
    "\052\uff91\054\uff91\055\uff91\062\uff91\064\uff91\065\uff91\001" +
    "\002\000\102\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\011\uffbd\015\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\025\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\042\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\062\uffbd\064\uffbd" +
    "\065\uffbd\001\002\000\010\005\105\054\110\055\074\001" +
    "\002\000\102\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\011\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\025\uffbe\027\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\042\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\054\uffbe\055\uffbe\062\uffbe\064\uffbe" +
    "\065\uffbe\001\002\000\102\003\uffbc\004\uffbc\005\uffbc\006" +
    "\uffbc\007\uffbc\011\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\025\uffbc\027\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\042\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\054\uffbc\055\uffbc\062" +
    "\uffbc\064\uffbc\065\uffbc\001\002\000\102\003\uffba\004\uffba" +
    "\005\uffba\006\uffba\007\uffba\011\uffba\015\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\025\uffba\027\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\042\uffba\047\uffba\050\uffba\051\uffba\052\uffba\054\uffba" +
    "\055\uffba\062\uffba\064\uffba\065\uffba\001\002\000\102\003" +
    "\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8\015\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\025\uffb8\027" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\042\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\054\uffb8\055\uffb8\062\uffb8\064\uffb8\065\uffb8\001\002" +
    "\000\102\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\011" +
    "\uffb7\015\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\025\uffb7\027\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\042\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\054\uffb7\055\uffb7\062\uffb7\064\uffb7\065" +
    "\uffb7\001\002\000\024\005\105\037\016\047\034\050\040" +
    "\052\024\054\221\055\074\064\015\065\053\001\002\000" +
    "\022\031\103\032\101\033\076\034\104\035\100\036\102" +
    "\040\242\051\137\001\002\000\004\041\243\001\002\000" +
    "\052\003\050\004\043\005\045\006\070\007\054\011\062" +
    "\015\023\017\042\020\052\022\055\025\037\037\016\047" +
    "\034\050\040\052\024\054\065\055\074\062\244\064\015" +
    "\065\053\001\002\000\004\042\261\001\002\000\054\003" +
    "\050\004\043\005\045\006\070\007\054\011\062\015\023" +
    "\017\042\020\052\022\055\025\037\037\016\042\246\047" +
    "\034\050\040\052\024\054\065\055\074\062\247\064\015" +
    "\065\053\001\002\000\062\003\uffb0\004\uffb0\005\uffb0\006" +
    "\uffb0\007\uffb0\011\uffb0\015\uffb0\016\251\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\025\uffb0\037\uffb0\042\uffb0\047" +
    "\uffb0\050\uffb0\052\uffb0\054\uffb0\055\uffb0\062\uffb0\064\uffb0" +
    "\065\uffb0\001\002\000\004\042\250\001\002\000\060\003" +
    "\uffae\004\uffae\005\uffae\006\uffae\007\uffae\011\uffae\015\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\025\uffae\037" +
    "\uffae\042\uffae\047\uffae\050\uffae\052\uffae\054\uffae\055\uffae" +
    "\062\uffae\064\uffae\065\uffae\001\002\000\004\041\252\001" +
    "\002\000\052\003\050\004\043\005\045\006\070\007\054" +
    "\011\062\015\023\017\042\020\052\022\055\025\037\037" +
    "\016\047\034\050\040\052\024\054\065\055\074\062\253" +
    "\064\015\065\053\001\002\000\004\042\260\001\002\000" +
    "\054\003\050\004\043\005\045\006\070\007\054\011\062" +
    "\015\023\017\042\020\052\022\055\025\037\037\016\042" +
    "\255\047\034\050\040\052\024\054\065\055\074\062\256" +
    "\064\015\065\053\001\002\000\060\003\uffad\004\uffad\005" +
    "\uffad\006\uffad\007\uffad\011\uffad\015\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\025\uffad\037\uffad\042\uffad\047" +
    "\uffad\050\uffad\052\uffad\054\uffad\055\uffad\062\uffad\064\uffad" +
    "\065\uffad\001\002\000\004\042\257\001\002\000\060\003" +
    "\uffab\004\uffab\005\uffab\006\uffab\007\uffab\011\uffab\015\uffab" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\025\uffab\037" +
    "\uffab\042\uffab\047\uffab\050\uffab\052\uffab\054\uffab\055\uffab" +
    "\062\uffab\064\uffab\065\uffab\001\002\000\060\003\uffac\004" +
    "\uffac\005\uffac\006\uffac\007\uffac\011\uffac\015\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\025\uffac\037\uffac\042" +
    "\uffac\047\uffac\050\uffac\052\uffac\054\uffac\055\uffac\062\uffac" +
    "\064\uffac\065\uffac\001\002\000\060\003\uffaf\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\011\uffaf\015\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\025\uffaf\037\uffaf\042\uffaf\047" +
    "\uffaf\050\uffaf\052\uffaf\054\uffaf\055\uffaf\062\uffaf\064\uffaf" +
    "\065\uffaf\001\002\000\012\027\264\030\266\043\263\057" +
    "\265\001\002\000\006\054\134\055\133\001\002\000\060" +
    "\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0\015" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\025\ufff0" +
    "\037\ufff0\042\ufff0\047\ufff0\050\ufff0\052\ufff0\054\ufff0\055" +
    "\ufff0\062\ufff0\064\ufff0\065\ufff0\001\002\000\060\003\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\015\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\025\uffef\037\uffef" +
    "\042\uffef\047\uffef\050\uffef\052\uffef\054\uffef\055\uffef\062" +
    "\uffef\064\uffef\065\uffef\001\002\000\032\005\121\010\130" +
    "\012\125\037\016\047\034\050\040\052\024\053\122\054" +
    "\123\055\117\064\015\065\053\001\002\000\004\027\270" +
    "\001\002\000\060\003\uffed\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\011\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\025\uffed\037\uffed\042\uffed\047\uffed\050\uffed\052" +
    "\uffed\054\uffed\055\uffed\062\uffed\064\uffed\065\uffed\001\002" +
    "\000\004\044\272\001\002\000\004\027\273\001\002\000" +
    "\060\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6" +
    "\015\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\025" +
    "\uffd6\037\uffd6\042\uffd6\047\uffd6\050\uffd6\052\uffd6\054\uffd6" +
    "\055\uffd6\062\uffd6\064\uffd6\065\uffd6\001\002\000\022\031" +
    "\103\032\101\033\076\034\104\035\100\036\102\040\275" +
    "\051\137\001\002\000\102\003\uffd0\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\011\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\025\uffd0\027\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\052\uffd0\054\uffd0\055\uffd0\062" +
    "\uffd0\064\uffd0\065\uffd0\001\002\000\010\054\237\064\015" +
    "\065\053\001\002\000\102\003\uffb9\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\011\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\025\uffb9\027\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\042\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9\055\uffb9\062" +
    "\uffb9\064\uffb9\065\uffb9\001\002\000\004\002\001\001\002" +
    "\000\016\002\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d\011" +
    "\uff9d\001\002\000\016\002\uffff\004\043\005\157\006\070" +
    "\007\054\011\062\001\002\000\004\054\304\001\002\000" +
    "\004\037\305\001\002\000\006\040\306\061\150\001\002" +
    "\000\004\041\317\001\002\000\006\040\310\061\154\001" +
    "\002\000\004\041\311\001\002\000\050\003\050\004\043" +
    "\005\045\006\070\007\054\011\062\015\023\017\042\020" +
    "\052\022\055\025\037\037\016\047\034\050\040\052\024" +
    "\054\065\055\074\064\015\065\053\001\002\000\052\003" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\011\ufff6\015\ufff6" +
    "\017\ufff6\020\ufff6\022\ufff6\025\ufff6\037\ufff6\042\316\047" +
    "\ufff6\050\ufff6\052\ufff6\054\ufff6\055\ufff6\064\ufff6\065\ufff6" +
    "\001\002\000\050\003\050\004\043\005\045\006\070\007" +
    "\054\011\062\015\023\017\042\020\052\022\055\025\037" +
    "\037\016\047\034\050\040\052\024\054\065\055\074\064" +
    "\015\065\053\001\002\000\052\003\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\011\ufff6\015\ufff6\017\ufff6\020\ufff6\022" +
    "\ufff6\025\ufff6\037\ufff6\042\315\047\ufff6\050\ufff6\052\ufff6" +
    "\054\ufff6\055\ufff6\064\ufff6\065\ufff6\001\002\000\016\002" +
    "\uff98\004\uff98\005\uff98\006\uff98\007\uff98\011\uff98\001\002" +
    "\000\016\002\uff97\004\uff97\005\uff97\006\uff97\007\uff97\011" +
    "\uff97\001\002\000\050\003\050\004\043\005\045\006\070" +
    "\007\054\011\062\015\023\017\042\020\052\022\055\025" +
    "\037\037\016\047\034\050\040\052\024\054\065\055\074" +
    "\064\015\065\053\001\002\000\052\003\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\011\ufff6\015\ufff6\017\ufff6\020\ufff6" +
    "\022\ufff6\025\ufff6\037\ufff6\042\324\047\ufff6\050\ufff6\052" +
    "\ufff6\054\ufff6\055\ufff6\064\ufff6\065\ufff6\001\002\000\050" +
    "\003\050\004\043\005\045\006\070\007\054\011\062\015" +
    "\023\017\042\020\052\022\055\025\037\037\016\047\034" +
    "\050\040\052\024\054\065\055\074\064\015\065\053\001" +
    "\002\000\052\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\011\ufff6\015\ufff6\017\ufff6\020\ufff6\022\ufff6\025\ufff6\037" +
    "\ufff6\042\323\047\ufff6\050\ufff6\052\ufff6\054\ufff6\055\ufff6" +
    "\064\ufff6\065\ufff6\001\002\000\016\002\uff99\004\uff99\005" +
    "\uff99\006\uff99\007\uff99\011\uff99\001\002\000\016\002\uff9a" +
    "\004\uff9a\005\uff9a\006\uff9a\007\uff9a\011\uff9a\001\002\000" +
    "\016\002\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\011\uff9c" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\105\004\106\003\001\001\000\010\026" +
    "\302\103\300\104\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\020\034\026\021\033\057\034\063\035\016" +
    "\036\060\040\050\042\056\043\026\046\074\050\017\052" +
    "\031\053\027\057\040\063\070\064\012\065\066\066\020" +
    "\067\024\071\030\072\043\073\062\074\055\077\035\101" +
    "\032\113\046\114\072\116\071\117\045\120\025\121\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\020\034\040\050\042\056\043\026\046\074" +
    "\050\017\052\031\053\027\057\040\063\070\064\012\066" +
    "\273\077\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\034\064\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\020\125\040\050\042\056\043\026\046\074\050\017" +
    "\052\031\053\027\057\040\063\070\064\012\066\115\077" +
    "\035\110\226\114\117\115\126\001\001\000\004\043\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\020\034\026\021\033\057\034\063\035\016\036\060" +
    "\040\050\042\056\043\026\046\074\050\017\052\031\053" +
    "\027\057\040\063\070\064\012\066\020\067\111\071\030" +
    "\072\043\073\062\074\055\077\035\101\032\113\046\114" +
    "\072\116\071\117\045\120\025\121\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\076\001\001\000\002" +
    "\001\001\000\006\043\105\046\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\152\030\150\001\001\000\004\024" +
    "\142\001\001\000\042\020\125\040\050\042\056\043\026" +
    "\046\074\050\017\052\031\053\027\057\040\063\070\064" +
    "\012\066\115\077\035\110\123\114\117\115\126\001\001" +
    "\000\004\045\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\141\001\001" +
    "\000\006\043\105\046\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\020\125\040\050\042\056\043\026\046\074\050\017\052" +
    "\031\053\027\057\040\063\070\064\012\066\115\077\035" +
    "\110\145\114\117\115\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\020\125\040" +
    "\050\042\056\043\026\046\074\050\017\052\031\053\027" +
    "\057\040\063\070\064\012\066\115\077\035\110\162\114" +
    "\117\115\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\075\173\076\172\001\001\000\006\043\205" +
    "\112\204\001\001\000\002\001\001\000\004\075\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\100\020\034\026\021\033\057\034\063\035\016\036" +
    "\060\040\050\042\056\043\026\046\074\050\017\052\031" +
    "\053\027\057\040\063\070\064\012\065\200\066\020\067" +
    "\024\071\030\072\043\073\062\074\055\077\035\101\032" +
    "\113\046\114\072\116\071\117\045\120\025\121\065\001" +
    "\001\000\002\001\001\000\076\020\034\026\021\033\057" +
    "\034\063\035\016\036\060\040\050\042\056\043\026\046" +
    "\074\050\017\052\031\053\027\057\040\063\070\064\012" +
    "\066\020\067\111\071\030\072\043\073\062\074\055\077" +
    "\035\101\032\113\046\114\072\116\071\117\045\120\025" +
    "\121\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\100\020\034\026\021\033" +
    "\057\034\063\035\016\036\060\040\050\042\056\043\026" +
    "\046\074\050\017\052\031\053\027\057\040\063\070\064" +
    "\012\065\212\066\020\067\024\071\030\072\043\073\062" +
    "\074\055\077\035\101\032\113\046\114\072\116\071\117" +
    "\045\120\025\121\065\001\001\000\002\001\001\000\076" +
    "\020\034\026\021\033\057\034\063\035\016\036\060\040" +
    "\050\042\056\043\026\046\074\050\017\052\031\053\027" +
    "\057\040\063\070\064\012\066\020\067\111\071\030\072" +
    "\043\073\062\074\055\077\035\101\032\113\046\114\072" +
    "\116\071\117\045\120\025\121\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\020\034" +
    "\040\050\042\056\043\026\046\074\050\017\052\031\053" +
    "\027\057\040\063\070\064\012\066\217\077\035\001\001" +
    "\000\004\045\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\020\034\026\021\033\057\034\063\035\016" +
    "\036\060\040\050\042\056\043\026\046\074\050\017\052" +
    "\031\053\027\057\040\063\070\064\012\065\223\066\020" +
    "\067\024\071\030\072\043\073\062\074\055\077\035\101" +
    "\032\113\046\114\072\116\071\117\045\120\025\121\065" +
    "\001\001\000\076\020\034\026\021\033\057\034\063\035" +
    "\016\036\060\040\050\042\056\043\026\046\074\050\017" +
    "\052\031\053\027\057\040\063\070\064\012\066\020\067" +
    "\111\071\030\072\043\073\062\074\055\077\035\101\032" +
    "\113\046\114\072\116\071\117\045\120\025\121\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\020\034\040" +
    "\050\042\056\043\026\046\074\050\017\052\031\053\027" +
    "\057\040\063\070\064\012\066\240\077\035\001\001\000" +
    "\004\045\137\001\001\000\002\001\001\000\100\020\034" +
    "\026\021\033\057\034\063\035\016\036\060\040\050\042" +
    "\056\043\026\046\074\050\017\052\031\053\027\057\040" +
    "\063\070\064\012\065\244\066\020\067\024\071\030\072" +
    "\043\073\062\074\055\077\035\101\032\113\046\114\072" +
    "\116\071\117\045\120\025\121\065\001\001\000\002\001" +
    "\001\000\076\020\034\026\021\033\057\034\063\035\016" +
    "\036\060\040\050\042\056\043\026\046\074\050\017\052" +
    "\031\053\027\057\040\063\070\064\012\066\020\067\111" +
    "\071\030\072\043\073\062\074\055\077\035\101\032\113" +
    "\046\114\072\116\071\117\045\120\025\121\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\100\020\034\026\021\033\057\034\063" +
    "\035\016\036\060\040\050\042\056\043\026\046\074\050" +
    "\017\052\031\053\027\057\040\063\070\064\012\065\253" +
    "\066\020\067\024\071\030\072\043\073\062\074\055\077" +
    "\035\101\032\113\046\114\072\116\071\117\045\120\025" +
    "\121\065\001\001\000\002\001\001\000\076\020\034\026" +
    "\021\033\057\034\063\035\016\036\060\040\050\042\056" +
    "\043\026\046\074\050\017\052\031\053\027\057\040\063" +
    "\070\064\012\066\020\067\111\071\030\072\043\073\062" +
    "\074\055\077\035\101\032\113\046\114\072\116\071\117" +
    "\045\120\025\121\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\020\125\040\050\042" +
    "\056\043\026\046\074\050\017\052\031\053\027\057\040" +
    "\063\070\064\012\066\115\077\035\110\266\114\117\115" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\137\001\001\000\002\001\001\000\006\020\034\064\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\302\103\324\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\306\030\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\100" +
    "\020\034\026\021\033\057\034\063\035\016\036\060\040" +
    "\050\042\056\043\026\046\074\050\017\052\031\053\027" +
    "\057\040\063\070\064\012\065\312\066\020\067\024\071" +
    "\030\072\043\073\062\074\055\077\035\101\032\113\311" +
    "\114\072\116\071\117\045\120\025\121\065\001\001\000" +
    "\002\001\001\000\076\020\034\026\021\033\057\034\063" +
    "\035\016\036\060\040\050\042\056\043\026\046\074\050" +
    "\017\052\031\053\027\057\040\063\070\064\012\066\020" +
    "\067\111\071\030\072\043\073\062\074\055\077\035\101" +
    "\032\113\313\114\072\116\071\117\045\120\025\121\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\020\034\026\021\033\057\034\063\035\016" +
    "\036\060\040\050\042\056\043\026\046\074\050\017\052" +
    "\031\053\027\057\040\063\070\064\012\065\320\066\020" +
    "\067\024\071\030\072\043\073\062\074\055\077\035\101" +
    "\032\113\317\114\072\116\071\117\045\120\025\121\065" +
    "\001\001\000\002\001\001\000\076\020\034\026\021\033" +
    "\057\034\063\035\016\036\060\040\050\042\056\043\026" +
    "\046\074\050\017\052\031\053\027\057\040\063\070\064" +
    "\012\066\020\067\111\071\030\072\043\073\062\074\055" +
    "\077\035\101\032\113\321\114\072\116\071\117\045\120" +
    "\025\121\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    protected int error_sync_size(){
        return 1;
    }
    private Symbol tokenError;
    private Symbol s;
    private TablaSimbolos tablaSimbolos = new TablaSimbolos();
    private boolean globalScope = true;
    private String scopeName;
    private TipoDato tipoAsignacion;
    private TipoDato tipoReturn; // solo para funciones

    public void syntax_error(Symbol s){
        this.s = s;
        this.tokenError = s;
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.out.println("compiler has detected a syntax error at line " + s.left
                    + " column " + s.right);
        System.out.println("Syntax error: línea: "+fila +" columna " + columna + " lexema: "+lexema);
    }

    public Symbol getS(){
        return this.s;
    }

    //****************************** Errores ************************
    public void ErrorSemantico(Simbolo simbolo) {
        String msg = "Error en la línea "+ simbolo.getFila() + ", columna "+ simbolo.getColumna() +". Ya existe ";
        if(simbolo instanceof Variable){
            msg += "la variable '" + simbolo.getIdentificador() + "' en el scope: " + simbolo.getScope();
        }
//        else if(simbolo instanceof Funcion){
//            msg += "la funcion o procedimiento '" + simbolo.getIdentificador() + "' con los mismos parámetros";
//        }
        //mostrar error en la UI
        System.out.println(msg);
    }
    public void ErrorSemantico(String identificador, int fila, int columna) {
        String msg = "Error en la línea "+ (fila+1) + ", columna "+ columna +
        ": tipos de datos no corresponden en la asignación de " + identificador;
        System.out.println(msg);
    }
    public void ErrorSemantico(String errorMsg) {
            //String errorMsg = "Error en " + identificador + " " + msg;
            System.out.println(errorMsg);
        }

    public void report_error(String message, Object info) {
        if (info instanceof String) {
            System.out.println(message);
        } else {
            if (info instanceof Symbol s) {
                String m = "Error sintático en: " + message;
                m += ", con el símbolo: \"" + s.value.toString() + "\"";
    //          ErrorUI(m, s.value.toString(), (s.left + 1), s.right);
            } else {
            System.err.println(message);
            }
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {


    public PilaSemantica pilaSemantica = new PilaSemantica();
    public PilaSemantica pilaSemantica_2 = new PilaSemantica();

    public boolean datosGlobales = true;

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= MAIN FUNCS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAIN ::= Int Main Parentesis_apertura Parentesis_cierre Llave_apertura BLOQUE Llave_cierre 
            {
              Object RESULT =null;
		
//        globalScope = false;
//        scopeName = "main";
        Generador.newFunc("main");

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= Int Main Parentesis_apertura Parentesis_cierre Llave_apertura Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE ::= EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE ::= BLOQUE EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPR ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXPR ::= VAL_ARRAY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPR ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPR ::= ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPR ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPR ::= USEFUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPR ::= FUNCPRINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLE ::= CREACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIABLE ::= CREAASIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIABLE ::= ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CREACION ::= TIPO Identificador Numeral 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        if (globalScope){
            scopeName = "Global";
        }
        Variable var = new Variable(id.toString(), scopeName);


        if (!tablaSimbolos.existeSimbolo(var, scopeName)){
            tablaSimbolos.insertarVariable(var);
        } else {
            ErrorSemantico(var);
        }
        Generador.declareVariable(var.identificador, var.getTipoDato().toString(), Integer.toString(0));

        //========================================
//        if (globalScope) {//setea el scope a global
//            Variable newVar = null;
//            if (!tablaSimbolos.existeVariable(id.toString(), "Global")){
//                tablaSimbolos.agregarVariable(id.toString(), idleft, idright, "Global"); //agrega la variable
//            } else {//si ya existe, obtengala y muestre el error
//                newVar = tablaSimbolos.getVariable(id.toString(), "Global");
//                ErrorSemantico(newVar);
//            }
//
//            /* verificar si existe el simbolo, es para que no se use el mismo id en una funcion con el mismo scope,
//            por ejemplo: int z# int x(){}
//            pero puede hacerse cuando se declaren funciones
//            */
//            for (int i = 0; i < tablaSimbolos.variables.size(); i++) {
//                Variable var = tablaSimbolos.variables.get(i);
////                var.setScope("Global");
//                if (tablaSimbolos.getTablaSimbolosSize() > 1) {
//                    if (!tablaSimbolos.existeSimbolo(var)) {
//                        tablaSimbolos.insertar(var);
//                    } else {
//                        ErrorSemantico(var);// ya existe simbolo
//                    }
//                } else {
//                    tablaSimbolos.insertar(var);
//                }
//            }
//            //sino es scope global, setear el scope correspondiente
//        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CREACION ::= TIPO Identificador Error 
            {
              Object RESULT =null;
		
            report_error("Creación de variable", s);
            RESULT = new Symbol(-1);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CREACION ::= epsilon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CREAASIG ::= TIPO Identificador Igual TIPOASIG Numeral 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int _tipoAsignleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int _tipoAsignright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object _tipoAsign = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        if (globalScope){
            scopeName = "Global";
        }
        Variable var = new Variable(id.toString(), scopeName);

        if (!tablaSimbolos.existeSimbolo(var, scopeName)){
            tablaSimbolos.insertarVariable(var);
        } else {
            ErrorSemantico(var);
        }
        //verificar tipos
        if (!tablaSimbolos.verificarTipo(id.toString(), scopeName, tipoAsignacion)){
            System.out.println("Operación inválida, tipo de datos diferentes");
            ErrorSemantico(id.toString(), idleft, idright);
            return null;
        }
        Generador.declareVariable(var.identificador, var.getTipoDato().toString(), Integer.toString(0));

        //por acá debe hacer la comprobación de tipos
        //...
//        if (globalScope) {//setea el scope a global
//            if (!tablaSimbolos.existeVariable(id.toString(), "Global")){
//                tablaSimbolos.agregarVariable(id.toString(), idleft, idright); //agrega la variable
//            }
//
//            for (int i = 0; i < tablaSimbolos.variables.size(); i++) {
//                Variable var = tablaSimbolos.variables.get(i);
//                var.setScope("Global");
//                if (tablaSimbolos.getTablaSimbolosSize() > 1) {
//                    if (!tablaSimbolos.existeSimbolo(var)) {
//                        tablaSimbolos.insertar(var);
//                    } else {
//                        ErrorSemantico(var);
//                    }
//                } else {
//                    tablaSimbolos.insertar(var);
//                }
//            }
//            if (!tablaSimbolos.verificarTipo(id.toString(), "Global", tipoAsignacion)){
//                System.out.println("Operación inválida, tipo de datos diferentes");
//                ErrorSemantico(id.toString(), idleft, idright);
//                return null;
//            }
//        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAASIG",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CREAASIG ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAASIG",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNAR ::= Identificador Igual TIPOASIG Numeral 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int _tipoAsigleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int _tipoAsigright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object _tipoAsig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
//        RESULT = new Symbol(-1, _tipoAsig.toString());

        Variable var = tablaSimbolos.getVariable(id.toString(), scopeName);
        if (var == null){
            ErrorSemantico("Error: " + id.toString()+ " no ha sido declarada en el scope");
        } else if (!tablaSimbolos.verificarTipo(id.toString(), "Global", tipoAsignacion)){
            System.out.println("Operación inválida, tipo de datos diferentes");
        }

//        RESULT = new Symbol(-1, _tipoAsig.toString());
//        Variable aux = tablaSimbolos.getVariable(id.toString(), "Global");
//
//        if(aux == null){// variables no declaradas
//            ErrorSemantico("Error: " + id.toString()+ " no ha sido declarada en el scope");
//        } else if (!tablaSimbolos.verificarTipo(id.toString(), "Global", tipoAsignacion)){ //comprobar el tipo, tipoAsignacion es del lado izq
//            System.out.println("Operación inválida, tipo de datos diferentes");
//        }
//        Symbol tipoAsig = (Symbol) _tipoAsig;// aun no se para que necesito esto
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= Int 
            {
              Object RESULT =null;
		int _intleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int _intright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object _int = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Symbol(-1, _int.toString());
        tablaSimbolos.agregarTipoDato(TipoDato.Int);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= Bool 
            {
              Object RESULT =null;
		int _boolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int _boolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object _bool = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            RESULT = new Symbol(-1, _bool.toString());
            tablaSimbolos.agregarTipoDato(TipoDato.Bool);
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= Float 
            {
              Object RESULT =null;
		int _floatleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int _floatright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object _float = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            RESULT = new Symbol(-1, _float.toString());
            tablaSimbolos.agregarTipoDato(TipoDato.Float);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO ::= Char 
            {
              Object RESULT =null;
		int _charleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int _charright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object _char = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            RESULT = new Symbol(-1, _char.toString());
            tablaSimbolos.agregarTipoDato(TipoDato.Char);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO ::= String 
            {
              Object RESULT =null;
		int _stringleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int _stringright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object _string = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            RESULT = new Symbol(-1, _string.toString());
            tablaSimbolos.agregarTipoDato(TipoDato.String);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPOASIG ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Symbol(-1, num.toString());
        tipoAsignacion = TipoDato.Int;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPOASIG ::= Float 
            {
              Object RESULT =null;
		int _floatleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int _floatright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object _float = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Symbol(-1, _float.toString());
        tipoAsignacion = TipoDato.Float;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPOASIG ::= String_literal 
            {
              Object RESULT =null;
		int str_literalleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int str_literalright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object str_literal = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
           RESULT = new Symbol(-1, str_literal.toString());
           tipoAsignacion = TipoDato.String;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPOASIG ::= Char_literal 
            {
              Object RESULT =null;
		int char_litleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int char_litright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object char_lit = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Symbol(-1, char_lit.toString());
        tipoAsignacion = TipoDato.Char;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPOASIG ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Symbol(-1, id.toString());
        Variable variable = tablaSimbolos.getVariable(id.toString(), scopeName);//global por ahora

        if (variable == null){
             ErrorSemantico("Error: " + id.toString()+ " no ha sido declarada en el scope");
        } else if (variable.getTipoDato() == TipoDato.Int){
            tipoAsignacion = TipoDato.Int;
        } else if(variable.getTipoDato() == TipoDato.Float){
            tipoAsignacion = TipoDato.Float;
        } else {
            System.out.println("Operación inválida, tipo de datos diferentes");
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPOASIG ::= Op_Booleano 
            {
              Object RESULT =null;
		int op_boolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int op_boolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op_bool = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Symbol(-1, op_bool.toString());
        tipoAsignacion = TipoDato.Bool;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPOASIG ::= ARRAY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPOASIG ::= BOOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPOASIG ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPOASIG ::= USEFUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOASIG",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BOOL ::= True 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Symbol(-1, t.toString());
        tipoAsignacion = TipoDato.Bool;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BOOL ::= False 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new Symbol(-1, f.toString());
        tipoAsignacion = TipoDato.Bool;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VAL_ARRAY ::= CREAARRAY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAL_ARRAY",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VAL_ARRAY ::= ASIGNARARRAY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAL_ARRAY",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARRAY ::= Identificador Corchete_apertura ARRAYTIPO Corchete_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAY",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CREAARRAY ::= TIPO Identificador Corchete_apertura ARRAYTIPO Corchete_cierre Numeral 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAARRAY",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNARARRAY ::= Identificador Corchete_apertura ARRAYTIPO Corchete_cierre Igual TIPOASIG Numeral 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNARARRAY",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARRAYTIPO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYTIPO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARRAYTIPO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARRAYTIPO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION ::= OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION ::= COMB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION ::= Parentesis_apertura OPERACION Parentesis_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP ::= OPARITM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP ::= OPUNIARIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OP ::= OPREL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP ::= OPLOG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPARITM ::= OPERANDOARIT ARITMETICO OPERANDOARIT 
            {
              Object RESULT =null;
		
        tipoAsignacion = TipoDato.Int;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPARITM",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERANDOARIT ::= OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDOARIT",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERANDO ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         RESULT = new Symbol(-1, id.toString());
//         Simbolo simbol = tablaSimbolos.getSimbolo(id.toString());// puede ser variable o funcion
         Variable variable = tablaSimbolos.getVariable(id.toString(), "Global");//global por ahora

         if (variable == null){
             ErrorSemantico("Error: " + id.toString()+ " no ha sido declarada en el scope");
         } else if (variable.getTipoDato() == TipoDato.Int){
             tipoAsignacion = TipoDato.Int;
         } else if(variable.getTipoDato() == TipoDato.Float){
             tipoAsignacion = TipoDato.Float;
         } else {
             System.out.println("Operación inválida, tipo de datos diferentes");
         }
         //else if (!tablaSimbolos.verificarTipo(id.toString(), "Global", variable.getTipoDato())){ //comprobar el tipo
             //System.out.println("Operación inválida, tipo de datos diferentes <-");
         //}
//          Symbol operando = (Symbol) id;// aun no se para que necesito esto
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERANDO ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            tipoAsignacion = TipoDato.Int;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERANDO ::= Float 
            {
              Object RESULT =null;
		
             tipoAsignacion = TipoDato.Float;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARITMETICO ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARITMETICO ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARITMETICO ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARITMETICO ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARITMETICO ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARITMETICO ::= Potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICO",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPUNIARIA ::= INCR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPUNIARIA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPUNIARIA ::= DECR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPUNIARIA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INCR ::= OPERANDO Op_Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INCR ::= Op_Incremento OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECR ::= OPERANDO Op_Decremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECR",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECR ::= Op_Decremento OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECR",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPREL ::= OPERANDO Op_Relacional OPERANDO 
            {
              Object RESULT =null;
		
        tipoAsignacion = TipoDato.Bool;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPREL",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPLOG ::= EXPRLOG Op_Logico EXPRLOG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPLOG",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPLOG ::= Op_Logico EXPRLOG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPLOG",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRLOG ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         Variable variable = tablaSimbolos.getVariable(id.toString(), "Global");//global por ahora

         if (variable == null){
             ErrorSemantico("Error: " + id.toString()+ " no ha sido declarada en el scope");
         } else if (variable.getTipoDato() != TipoDato.Bool){
             System.out.println("Operación inválida, tipo de datos diferentes");
         }
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRLOG",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRLOG ::= BOOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRLOG",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COMB ::= OPERACION ARITMETICO OPERANDOARIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMB",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COMB ::= OPERACION Op_Relacional OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMB",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ESTRUCTURA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ESTRUCTURA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ESTRUCTURA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF ::= If Parentesis_apertura OPERACION Parentesis_cierre Llave_apertura BLOQUE Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IF ::= If Parentesis_apertura OPERACION Parentesis_cierre Llave_apertura Break Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF ::= If Parentesis_apertura OPERACION Parentesis_cierre Llave_apertura BLOQUE Break Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IF ::= If Parentesis_apertura OPERACION Parentesis_cierre Llave_apertura BLOQUE Llave_cierre Else Llave_apertura BLOQUE Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IF ::= If Parentesis_apertura OPERACION Parentesis_cierre Llave_apertura BLOQUE Llave_cierre Else Llave_apertura Break Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IF ::= If Parentesis_apertura OPERACION Parentesis_cierre Llave_apertura BLOQUE Llave_cierre Else Llave_apertura BLOQUE Break Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // WHILE ::= While Parentesis_apertura OPERACION Parentesis_cierre Llave_apertura BLOQUE Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASES",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CASES ::= CASES CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASES",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SWITCH ::= Switch Parentesis_apertura OPERANDO Parentesis_cierre Llave_apertura CASES Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CASE ::= Case CASEOPTION Simb_especial BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CASE ::= Case CASEOPTION Simb_especial Break Numeral 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CASE ::= Case CASEOPTION Simb_especial BLOQUE Break Numeral 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CASE ::= Default Simb_especial BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CASE ::= Default Simb_especial Break Numeral 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CASE ::= Default Simb_especial BLOQUE Break Numeral 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CASEOPTION ::= String_literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASEOPTION",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CASEOPTION ::= Char_literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASEOPTION",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CASEOPTION ::= OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASEOPTION",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNCS ::= FUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCS",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNCS ::= FUNCS FUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCS",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCPRINT ::= Print Parentesis_apertura TIPOASIG Parentesis_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCPRINT",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNC ::= TIPO Identificador Parentesis_apertura Parentesis_cierre Llave_apertura RETURN Llave_cierre 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		

        globalScope = false;
        Simbolo identificador;

        if (!globalScope){
            scopeName = id.toString();
        }
        Funcion funcion = new Funcion(id.toString(), scopeName, null);//null porque no tiene param
        if (!tablaSimbolos.existeSimbolo(funcion, scopeName)){
            tablaSimbolos.insertarFuncion(funcion);
        } else {
            ErrorSemantico(funcion);
        }

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNC ::= TIPO Identificador Parentesis_apertura Parentesis_cierre Llave_apertura BLOQUE RETURN Llave_cierre 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int _returnleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int _returnright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object _return = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        globalScope = false;
        Simbolo identificador;

        if (!globalScope){
            scopeName = id.toString();
        }

        Funcion funcion = new Funcion(id.toString(), scopeName, null);//null porque no tiene param
        if (!tablaSimbolos.existeSimbolo(funcion, scopeName)){
            tablaSimbolos.insertarFuncion(funcion);
        } else {
            ErrorSemantico(funcion);
        }

        // comprueba que el tipo de return sea igual al tipo de la funcion, unicamente id como return
        Symbol __return = (Symbol) _return;
        Variable variable = tablaSimbolos.getVariable(__return.value.toString(), scopeName);
        Funcion currentFunction = tablaSimbolos.getFuncion(id.toString(), scopeName);
        if (variable == null){
            ErrorSemantico("Error: " + id.toString()+ " no ha sido declarada en el scope");
        } else if (variable.getTipoDato() != currentFunction.getTipoDatoRetorno()){
            System.out.println("Tipo de dato de la función, no corresponde con el return type");
        }

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNC ::= TIPO Identificador Parentesis_apertura PARAM Parentesis_cierre Llave_apertura BLOQUE RETURN Llave_cierre 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        globalScope = false;
        Simbolo identificador;

        if (!globalScope){
            scopeName = id.toString();
        }
        System.out.println(par);
        Funcion funcion = new Funcion(id.toString(), scopeName, null);//null porque no tiene param
        if (!tablaSimbolos.existeSimbolo(funcion, scopeName)){
            tablaSimbolos.insertarFuncion(funcion);
        } else {
            ErrorSemantico(funcion);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNC ::= TIPO Identificador Parentesis_apertura PARAM Parentesis_cierre Llave_apertura RETURN Llave_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAM ::= PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAM ::= PARAM Coma PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMETRO ::= Coma TIPO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // USEFUNC ::= Identificador Parentesis_apertura Parentesis_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("USEFUNC",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // USEFUNC ::= Identificador Parentesis_apertura PARAM Parentesis_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("USEFUNC",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // RETURN ::= Return TIPOASIG Numeral 
            {
              Object RESULT =null;
		int tipoAsigleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tipoAsigright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipoAsig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Symbol returnType = (Symbol) tipoAsig;
        System.out.println("---->>>> " + returnType.value);
        RESULT = new Symbol(-1, returnType.value);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRCOM ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRCOM",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRCOM ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRCOM",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRCOM ::= ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRCOM",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRCOM ::= FUNCS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRCOM",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRCOM ::= TIPOASIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRCOM",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // COMENTARIO ::= Division Division EXPRCOM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // COMENTARIO ::= Division Multiplicacion EXPRCOM Multiplicacion Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
